import argparse
import sys

args = None

CACHE_MODELS = []

RESULT_MODELS = []

N_SOURCES = 0

def parse_args():
    global args    

    parser = argparse.ArgumentParser(
        prog='cache',
        description='Utility to remove models from the cache generated by `mgen rotate`',
        epilog='Copyright (c) 2024 Tushar Rakheja (The MIT License)'
    )

    parser.add_argument('-p', '--pmin', dest='pmin', type=float, default=0.05, help='Minimum viable p-value')
    parser.add_argument('--remove-passing', default=False, action='store_true', help="Remove passing models from a cache file")
    parser.add_argument('--run-only', dest='run_only', type=str, default=None, help='Path to a file containing a list of the only models you want to run. The cache is trimmed accordingly')
    parser.add_argument('--output-file', dest='output_file', type=str, default=None, help='The name of the output cache file, with the models removed (if not provided, the input cache file itself will be updated)')
    parser.add_argument('--cache-file', dest='cache_file', type=str, help='The path to the cache file to remove the models from', required=True)
    parser.add_argument('--results-file', dest='results_file', type=str, default=None, help='The path to the results file to look at for the p-values')
    
    args, _ = parser.parse_known_args()


def load_cache():
    global args, CACHE_MODELS

    with open(args.cache_file, 'r') as infile:
        l = infile.readlines()
    
    for line in l:
        line = line.strip()
        if not line:
            continue
        
        CACHE_MODELS.append(line)


def load_results():
    global args, RESULT_MODELS, N_SOURCES

    with open(args.results_file, 'r') as infile:
        l = infile.readlines()
    
    for line in l:
        line = line.strip()
        if not line:
            continue
        
        RESULT_MODELS.append(line)
        
    headers = RESULT_MODELS[0]

    N_SOURCES = len([header for header in headers.split(',') if header.startswith('Source ')])

    RESULT_MODELS = RESULT_MODELS[1:]


def filter_cache_for_passing():
    global args, CACHE_MODELS, RESULT_MODELS

    removed = 0
    print("Removing models:")

    for model in RESULT_MODELS:
        model = model.split(',')
        if model[-1] != '1':
            continue
        
        if float(model[-2]) < args.pmin:
            continue

        removed += 1

        cache_style_model = cache_style(model)
        print("\t{} - {}".format(removed, cache_style_model))

        CACHE_MODELS = list(filter(lambda cache_model: cache_model != cache_style_model, CACHE_MODELS))
    
    with open(args.output_file if args.output_file is not None else args.cache_file, 'w') as outfile:
        for model in CACHE_MODELS:
            outfile.write(model+"\n")


def cache_style(model):
    global N_SOURCES

    return ",".join(model[1:N_SOURCES + 1]).replace('-', '')


def run_only():
    global args, CACHE_MODELS

    models_to_run = []
    with open(args.run_only, 'r') as infile:
        l = infile.readlines()
    
    for line in l:
        line = line.strip()
        if not line:
            continue
        
        models_to_run.append(line)

    CACHE_MODELS = list(filter(lambda model: model not in models_to_run, CACHE_MODELS))

    with open(args.output_file if args.output_file is not None else args.cache_file, 'w') as outfile:
        for model in CACHE_MODELS:
            outfile.write(model+"\n")


def main():
    global args

    parse_args()

    load_cache()

    if args.remove_passing and args.run_only is not None:
        print("Please use only one of '--remove-passing' and '--run-only'")
        sys.exit(1)

    if args.remove_passing and args.results_file is None:
        print("You need to provide a results file!")
        sys.exit(1)

    if args.remove_passing:
        load_results()
        filter_cache_for_passing()
    elif args.run_only is not None:
        run_only()


if __name__ == '__main__':
    main()